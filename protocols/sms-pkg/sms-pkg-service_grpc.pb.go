// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: sms-pkg-service.proto

package sms_pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SmsService_CreateOrUpdateSms_FullMethodName = "/models.SmsService/CreateOrUpdateSms"
	SmsService_SmsBy_FullMethodName             = "/models.SmsService/SmsBy"
	SmsService_DeleteSms_FullMethodName         = "/models.SmsService/DeleteSms"
)

// SmsServiceClient is the client API for SmsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmsServiceClient interface {
	CreateOrUpdateSms(ctx context.Context, in *Sms, opts ...grpc.CallOption) (*SmsEmpty, error)
	SmsBy(ctx context.Context, in *SmsByRequest, opts ...grpc.CallOption) (*Sms, error)
	DeleteSms(ctx context.Context, in *SmsByRequest, opts ...grpc.CallOption) (*SmsEmpty, error)
}

type smsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSmsServiceClient(cc grpc.ClientConnInterface) SmsServiceClient {
	return &smsServiceClient{cc}
}

func (c *smsServiceClient) CreateOrUpdateSms(ctx context.Context, in *Sms, opts ...grpc.CallOption) (*SmsEmpty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SmsEmpty)
	err := c.cc.Invoke(ctx, SmsService_CreateOrUpdateSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsServiceClient) SmsBy(ctx context.Context, in *SmsByRequest, opts ...grpc.CallOption) (*Sms, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Sms)
	err := c.cc.Invoke(ctx, SmsService_SmsBy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsServiceClient) DeleteSms(ctx context.Context, in *SmsByRequest, opts ...grpc.CallOption) (*SmsEmpty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SmsEmpty)
	err := c.cc.Invoke(ctx, SmsService_DeleteSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmsServiceServer is the server API for SmsService service.
// All implementations must embed UnimplementedSmsServiceServer
// for forward compatibility.
type SmsServiceServer interface {
	CreateOrUpdateSms(context.Context, *Sms) (*SmsEmpty, error)
	SmsBy(context.Context, *SmsByRequest) (*Sms, error)
	DeleteSms(context.Context, *SmsByRequest) (*SmsEmpty, error)
	mustEmbedUnimplementedSmsServiceServer()
}

// UnimplementedSmsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSmsServiceServer struct{}

func (UnimplementedSmsServiceServer) CreateOrUpdateSms(context.Context, *Sms) (*SmsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateSms not implemented")
}
func (UnimplementedSmsServiceServer) SmsBy(context.Context, *SmsByRequest) (*Sms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmsBy not implemented")
}
func (UnimplementedSmsServiceServer) DeleteSms(context.Context, *SmsByRequest) (*SmsEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSms not implemented")
}
func (UnimplementedSmsServiceServer) mustEmbedUnimplementedSmsServiceServer() {}
func (UnimplementedSmsServiceServer) testEmbeddedByValue()                    {}

// UnsafeSmsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmsServiceServer will
// result in compilation errors.
type UnsafeSmsServiceServer interface {
	mustEmbedUnimplementedSmsServiceServer()
}

func RegisterSmsServiceServer(s grpc.ServiceRegistrar, srv SmsServiceServer) {
	// If the following call pancis, it indicates UnimplementedSmsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SmsService_ServiceDesc, srv)
}

func _SmsService_CreateOrUpdateSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServiceServer).CreateOrUpdateSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsService_CreateOrUpdateSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServiceServer).CreateOrUpdateSms(ctx, req.(*Sms))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsService_SmsBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServiceServer).SmsBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsService_SmsBy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServiceServer).SmsBy(ctx, req.(*SmsByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsService_DeleteSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServiceServer).DeleteSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmsService_DeleteSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServiceServer).DeleteSms(ctx, req.(*SmsByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SmsService_ServiceDesc is the grpc.ServiceDesc for SmsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.SmsService",
	HandlerType: (*SmsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateSms",
			Handler:    _SmsService_CreateOrUpdateSms_Handler,
		},
		{
			MethodName: "SmsBy",
			Handler:    _SmsService_SmsBy_Handler,
		},
		{
			MethodName: "DeleteSms",
			Handler:    _SmsService_DeleteSms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sms-pkg-service.proto",
}
